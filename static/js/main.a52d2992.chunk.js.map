{"version":3,"sources":["gameParams/actions.js","gameParams/reducer.js","gameParams/index.js","game/actions.js","turns/actions.js","game/reducer.js","game/index.js","turns/reducer.js","turns/index.js","store/index.js","peer/index.js","App.js","serviceWorker.js","index.js"],"names":["CHANGE_SIZE","CHANGE_SUCCESS_CRITERIA","initialState","size","successCriteria","gameParams","state","action","type","actions","payload","connect","dispatch","changeSize","parseInt","changeSuccessCriteria","props","useState","setSize","setSuccessCriteria","className","htmlFor","name","id","value","onChange","e","_size","target","min","max","CHANGE_GAME_STATE","CHECK_GAME_OVER","changeGameState","CHANGE_TURN","changeTurns","initGameState","getState","row","column","turn","findLengthInDirection","position","gameState","change","upwardLength","downwardLength","length","isWinning","directions","i","document","title","combineReducers","gameParamsActions","Array","fill","map","v","newState","_row","_column","console","log","gameOver","turns","turnNumber","checkGameOver","setPosition","handleGameTurn","a","window","peer","connectedRTC","send","sizeArray","key","onClick","reducer","rootReducer","store","createStore","applyMiddleware","thunk","Peer","setDataReceive","connection","on","data","gameAction","peerId","setPeerID","connectToPeerId","setConnectToPeerID","useEffect","peerjsConnection","connectWithPeer","minLength","style","display","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAAaA,EAAc,wBACdC,EAA0B,mC,gkBCAvC,IAAMC,EAAe,CACnBC,KAAM,EACNC,gBAAiB,GAgBJC,MAbf,WAAmD,IAA/BC,EAA8B,uDAAtBJ,EAAcK,EAAQ,uCAChD,OAAQA,EAAOC,MACb,KAAKC,EAEH,OAAO,EAAP,GAAWH,EAAX,CAAkBH,KAAMI,EAAOG,UACjC,KAAKD,EAEH,OAAO,EAAP,GAAWH,EAAX,CAAkBF,gBAAiBG,EAAOG,UAC5C,QACE,OAAOJ,ICiBb,IAMeK,eANS,SAACL,GAAD,MAAY,CAACH,KAAMG,EAAMD,WAAWF,KAAMC,gBAAiBE,EAAMD,WAAWD,oBACzE,SAAAQ,GAAQ,MAAK,CACtCA,WACAC,WAAY,SAAAH,GAAO,OAAII,SAASJ,EAAS,IAAME,EFhCvB,SAAAF,GAAO,MAAK,CACpCF,KAAMR,EACNU,WE8BwDG,CAAWH,IAAY,MAC/EK,sBAAuB,SAAAL,GAAO,OAAII,SAASJ,EAAS,IAAME,EF5BvB,SAAAF,GAAO,MAAK,CAC/CF,KAAMP,EACNS,WE0BmEK,CAAsBL,IAAY,SAExFC,EAjCf,SAAoBK,GAAO,IAAD,EACAC,mBAASD,EAAMb,MADf,mBACjBA,EADiB,KACXe,EADW,OAEsBD,mBAASD,EAAMZ,iBAFrC,mBAEjBA,EAFiB,KAEAe,EAFA,KAkBxB,OAAQ,oCACN,yBAAKC,UAAU,SACb,2BAAOC,QAAQ,QAAf,kBACA,2BAAOb,KAAK,SAASc,KAAK,OAAOC,GAAG,OAAOC,MAAOrB,EAAMsB,SAjBnC,SAAAC,GACvB,IAAIC,EAAQb,SAASY,EAAEE,OAAOJ,OACR,KAAnBE,EAAEE,OAAOJ,QACVN,EAAQS,GACRX,EAAMH,WAAWc,KAamEE,IAAK,EAAGC,IAAK,KACjG,2BAAOT,QAAQ,mBAAf,oBACA,2BAAOb,KAAK,SAASc,KAAK,kBAAkBC,GAAG,kBAAkBC,MAAOpB,EAAiBqB,SAXzD,SAAAC,GAC/BA,EAAEE,OAAOJ,MAAQrB,IACpBgB,EAAmBO,EAAEE,OAAOJ,OAC5BR,EAAMD,sBAAsBW,EAAEE,OAAOJ,SAQ6FK,IAAK,EAAGC,IAAK,U,uBC5BtIC,EAAoB,uBAEpBC,EAAkB,qBAElBC,EAAkB,SAAAvB,GAAO,MAAK,CACzCF,KAAMuB,EACNrB,YCNWwB,EAAc,mBAEdC,EAAc,SAAAzB,GAAO,MAAK,CACrCF,KAAM0B,EACNxB,Y,eCAI0B,EAAgB,CACpB,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAGDC,EAAW,SAACC,EAAKC,EAAQC,GAC7B,MAAY,MAATA,EACO,EACU,MAATA,EACD,OADH,GAKT,SAASC,EAAsBC,EAAUC,EAAWnB,EAAOoB,GAKzD,IALkE,IAC7DN,EAAeI,EAAfJ,IAAKC,EAAUG,EAAVH,OACNM,EAAe,EACfC,EAAiB,EAEfR,GAAO,GAAKA,EAAMK,EAAUI,QAAUR,GAAU,GAAKA,EAASI,EAAUI,QAAUJ,EAAUL,GAAKC,IAClGI,EAAUL,GAAKC,KAAYf,GAC5BsB,IACAR,GAAYM,EAAO,GACnBL,GAAkBK,EAAO,GAO7B,IAFAN,EAAMI,EAASJ,IAAMM,EAAO,GAC5BL,EAASG,EAASH,OAASK,EAAO,GAC5BN,GAAO,GAAKA,EAAMK,EAAUI,QAAUR,GAAU,GAAKA,EAASI,EAAUI,QAAUJ,EAAUL,GAAKC,IAClGI,EAAUL,GAAKC,KAAYf,GAC5BqB,IACAP,GAAYM,EAAO,GACnBL,GAAkBK,EAAO,GAK7B,OAAOC,EAAeC,EAGxB,SAASE,EAAT,EAAkCL,EAAWvC,GAE3C,IAF4D,IAA1CkC,EAAyC,EAAzCA,IAAKC,EAAoC,EAApCA,OACnBU,EAAa,CAAC,CAAC,EAAE,GAAI,CAAC,EAAG,GAAI,EAAE,GAAI,GAAI,EAAE,EAAG,IACvCC,EAAE,EAAGA,EAAID,EAAWF,OAAQG,IAAK,CAExC,GADwBT,EAAsB,CAACH,MAAKC,UAASI,EAAWA,EAAUL,GAAKC,GAASU,EAAWC,KACnF9C,EAEtB,OADA+C,SAASC,MAAQ,aACV,EAGX,OAAO,EAwCMC,kBAAgB,CAACV,UArChC,WAAmD,IAAhCrC,EAA+B,uDAAvB8B,EAAe7B,EAAQ,uCAChD,OAAQA,EAAOC,MACb,KAAK8C,EACH,OAAO,IAAIC,MAAMhD,EAAOG,SAAS8C,KAAK,GAAGC,KAAI,SAACC,EAAER,GAAH,OAAQ,IAAIK,MAAMhD,EAAOG,SAAS8C,KAAK,MAEtF,KAAK/C,EAAL,MAC6CF,EAAOG,QAA7C4B,EADP,EACOA,IAAKC,EADZ,EACYA,OAAQC,EADpB,EACoBA,KAAMpC,EAD1B,EAC0BA,gBACpBuD,EAAWrD,EAAMmD,KAAI,SAACjC,EAAOoC,GAC/B,OAAGA,IAAStB,EACHd,EAAMiC,KAAI,SAACjC,EAAOqC,GACvB,OAAGA,IAAYtB,EACNF,EAASC,EAAKC,EAAQC,GAEtBhB,KAIN,YAAIA,MAIb,OAFAsC,QAAQC,IAAI,aACZf,EAAU,CAACV,MAAKC,UAASoB,EAAUvD,GAC5BuD,EACT,QACE,OAAOrD,IAc8B0D,SAV3C,WAAyC,IAAvB1D,EAAsB,wDAAPC,EAAO,uCACtC,OAAOA,EAAOC,MACZ,KAAKC,EAAL,MACkDF,EAAOG,QACvD,OAAOsC,EAAU,CAACV,IAFpB,EACOA,IACkBC,OAFzB,EACYA,QADZ,EACoBI,UADpB,EAC+BvC,iBAE/B,QACE,OAAOE,MCvBEK,eAjBS,SAAC,GAA2D,IAA1DN,EAAyD,EAAzDA,WAAyD,IAA7CsC,UAAYA,EAAiC,EAAjCA,UAAWqB,EAAsB,EAAtBA,SAAWC,EAAW,EAAXA,MACtE,MAAO,CACL9D,KAAME,EAAWF,KACjBC,gBAAiBC,EAAWD,gBAC5BuC,YACAqB,WACAxB,KAAMyB,EAAMzB,KACZ0B,WAAYD,EAAMC,eAGK,SAAAtD,GAAQ,MAAK,CACtCA,WACAqB,gBAAiB,SAAAvB,GAAO,OAAIE,EAASqB,EAAgBvB,KACrDyD,cAAe,SAAAzD,GAAO,OAAIE,EHvDC,SAAAF,GAAO,MAAK,CACvCF,KAAMwB,EACNtB,WGqDmCyD,CAAczD,KACjDyB,YAAa,SAAAzB,GAAO,OAAIE,EAASuB,EAAYzB,QAGhCC,EA9DK,SAAAK,GAAU,IAAD,EACKC,mBAAS,IADd,mBACVmD,GADU,WAGrBC,EAAiB,SAAC/B,EAAKC,GAAN,8CAAiB,WAAMb,GAAN,mBAAA4C,EAAA,6DACvB,EACR9B,EAAgDxB,EAAhDwB,KAAM0B,EAA0ClD,EAA1CkD,WAAY9D,EAA8BY,EAA9BZ,gBAA8BY,EAAb2B,UAFJ,SAI9B4B,OAAOC,KAAKC,aAAaC,KAAK,CAClCR,aAAY5B,MAAKC,SAAQC,SALS,OAQtC4B,EAAY,CAAC9B,MAAKC,WACkB,IAAjCvB,EAAM2B,UAAUL,GAAKC,KAEtBvB,EAAMiB,gBAAgB,CAACK,MAAKC,SAAQC,OAAMpC,oBAC1CY,EAAMmB,YAAY,CAACK,OAAM0B,gBAZW,2CAAjB,uDAiBnBS,EAAY,IAAIpB,MAAMvC,EAAMb,MAAMqD,KAAK,GAa3C,OAAQ,yBAAKpC,UAAU,QAEnBuD,EAAUlB,KAAI,SAACjC,EAAOc,GAAR,OAAiB,yBAAKlB,UAAU,MAAMwD,IAAKtC,EAAI,QAC1DqC,EAAUlB,KAAI,SAACjC,EAAOe,GACrB,OAAQ,yBAAKnB,UAAU,UAAUwD,IAAKrC,EAAS,UAAWsC,QAASR,EAAe/B,EAAKC,IAhB9E,SAACD,EAAKC,GACrB,OAAQvB,EAAM2B,UAAUL,GAAKC,IAC3B,KAAK,EACH,MAAO,IACT,KAAK,EACH,MAAO,IACT,KAAK,EACL,QACE,MAAO,IAQ4FF,CAASC,EAAKC,e,yjBCzCzH,IACMrC,EAAe,CACnBgE,WAAY,EACZ1B,KAHa,KAmBAsC,MAbf,WAAgD,IAA/BxE,EAA8B,uDAAtBJ,EAAcK,EAAQ,uCAC7C,OAAQA,EAAOC,MACb,KAAKC,EAEH,QADEH,EAAM4D,WACmB,MAAxB3D,EAAOG,QAAQ8B,KACT,KAAIlC,EAAX,CAAkB4D,WAAY5D,EAAM4D,aAAc1B,KAAM,MAEnD,KAAIlC,EAAX,CAAmB4D,WAAY5D,EAAM4D,aAAc1B,KAAM,MAC3D,QACE,OAAOlC,ICJb,IAIeK,eAJS,SAACL,GAAD,MAAY,CAACkC,KAAKlC,EAAMkC,SACrB,SAAA5B,GAAQ,MAAK,CACtCuB,YAAa,SAAAzB,GAAO,OAAIE,EAASuB,EAAYzB,QAEhCC,EAZf,SAAeK,GACb,OAAQ,yBAAKI,UAAU,UACrB,4BAAQA,UAAwB,MAAbJ,EAAMwB,KAAa,YAAa,IAAnD,KACA,4BAAQpB,UAAwB,MAAbJ,EAAMwB,KAAa,YAAa,IAAnD,S,gBCCEuC,G,MAAc1B,YAAgB,CAAChD,aAAY4D,QAAOtB,eAGzCqC,EAFDC,YAAYF,EAAaG,IAAe,WAAf,EAAmB,CAACC,OCJvDX,EAAOD,OAAOC,KAAO,IAAID,OAAOa,KAAK,CAACR,IAAK,mBAC/C,SAASS,EAAeC,EAAY1E,GAClC0E,EAAWC,GAAG,QAAQ,SAASC,GAC7B1B,QAAQC,IAAIyB,GADuB,IAE5BlD,EAAiCkD,EAAjClD,IAAKC,EAA4BiD,EAA5BjD,OAAQC,EAAoBgD,EAApBhD,KAAM0B,EAAcsB,EAAdtB,WAC1BtD,EAAS6E,EAA2B,CAACnD,MAAKC,SAAQC,UAClD5B,EAASuB,EAAY,CAACK,OAAM0B,mBAGhC,IA+CevD,cAAQ,MALI,SAAAC,GAAQ,MAAK,CACtCA,WACAuB,YAAa,SAAAzB,GAAO,OAAIE,EAASuB,SAGpBxB,EA/CF,SAAAK,GAAU,IAAD,EACQC,mBAAS,IADjB,mBACbyE,EADa,KACLC,EADK,OAE0B1E,mBAAS,IAFnC,mBAEb2E,EAFa,KAEIC,EAFJ,KAIpBC,qBAAU,WACRtB,EAAKe,GAAG,QAAQ,SAAShE,GACvBoE,EAAUpE,QAEX,IAEHuE,qBAAU,WAAM,4CAUd,sBAAAxB,EAAA,sEAC0DE,EAAK7D,QAAQiF,GADvE,OAEEP,EADuBd,OAAOC,KAAKC,aADrC,OAEmCzD,EAAMJ,UAFzC,4CAVc,sBACd4D,EAAKe,GAAG,cAAc,SAASQ,GAC7BjC,QAAQC,IAAI,aAEZQ,OAAOC,KAAKC,aAAesB,EAC3BA,EAAiBR,GAAG,QAAQ,SAASf,GACnCa,EAAeU,EAAkB/E,EAAMJ,gBAN7B,mCAcdoF,KACC,CAACJ,EAAiB5E,EAAMJ,WAO3B,OACE,6BACE,2BAAOS,QAAQ,UAAf,gBACA,0BAAMb,KAAK,OAAOc,KAAK,SAASC,GAAG,SAASC,MAAOkE,EAAQO,UAAW,GAAIC,MAAO,CAACC,QAAS,iBAAkB,IAAKT,EAAQ,KAC1H,2BAAOrE,QAAQ,UAAf,wBACA,2BAAOb,KAAK,OAAOc,KAAK,SAASC,GAAG,SAASC,MAAOoE,EAAiBnE,SAT7C,SAAAC,GAC1BmE,EAAmBnE,EAAEE,OAAOJ,cCnBjB4E,MAhBf,WACE,OACE,kBAAC,IAAD,CAAUpB,MAAOA,GACf,yBAAK5D,UAAU,OACb,4BAAQA,UAAU,cAChB,qCAEF,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCPYiF,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvD,SAASwD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a52d2992.chunk.js","sourcesContent":["export const CHANGE_SIZE = 'gameParams/changeSize';\nexport const CHANGE_SUCCESS_CRITERIA = 'gameParams/changeSuccessCriteria';\n\nexport const changeSize = payload => ({\n  type: CHANGE_SIZE,\n  payload\n})\n\nexport const changeSuccessCriteria = payload => ({\n  type: CHANGE_SUCCESS_CRITERIA,\n  payload\n})","import * as actions from './actions'\nconst initialState = {\n  size: 3,\n  successCriteria: 3\n}\n\nfunction gameParams(state = initialState, action) {\n  switch (action.type) {\n    case actions.CHANGE_SIZE:\n      // validation for size vs successcriteria\n      return {...state, size: action.payload}\n    case actions.CHANGE_SUCCESS_CRITERIA:\n      // validation for size vs successcriteria\n      return {...state, successCriteria: action.payload}\n    default:\n      return state\n  }\n}\n\nexport default gameParams;","import React, { useState } from 'react';\nimport { connect } from 'react-redux'\nimport { changeSize, changeSuccessCriteria } from './actions';\nexport {default as reducer} from './reducer';\n\nfunction GameParams(props){\n  const [size, setSize] = useState(props.size);\n  const [successCriteria, setSuccessCriteria] = useState(props.successCriteria);\n\n  const handleSizeChange = e => {\n    let _size = parseInt(e.target.value);\n    if(e.target.value !== '') {\n      setSize(_size);\n      props.changeSize(_size);\n    }\n  }\n\n  const handleSuccessCriteriaChange = e => {\n    if(e.target.value > size) return;\n    setSuccessCriteria(e.target.value);\n    props.changeSuccessCriteria(e.target.value);\n  }\n\n  return (<>\n    <div className=\"input\">\n      <label htmlFor=\"size\">Size of Square</label>\n      <input type=\"number\" name=\"size\" id=\"size\" value={size} onChange={handleSizeChange} min={3} max={10}/>\n      <label htmlFor=\"successCriteria\">Success Criteria</label>\n      <input type=\"number\" name=\"successCriteria\" id=\"successCriteria\" value={successCriteria} onChange={handleSuccessCriteriaChange} min={3} max={10} />\n    </div></>)\n}\n\nconst mapStateToProps = (state) => ({size: state.gameParams.size, successCriteria: state.gameParams.successCriteria})\nconst mapDispatchToProps = dispatch => ({\n  dispatch,\n  changeSize: payload => parseInt(payload, 10) ? dispatch(changeSize(payload)) : null,\n  changeSuccessCriteria: payload => parseInt(payload, 10) ? dispatch(changeSuccessCriteria(payload)) : null,\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(GameParams);","export const CHANGE_GAME_STATE = 'game/changeGameState';\nexport const CHANGE_GAME_SIZE = 'game/changeGameSize';\nexport const CHECK_GAME_OVER = 'game/checkGameOver';\n\nexport const changeGameState = payload => ({\n  type: CHANGE_GAME_STATE,\n  payload\n})\n\nexport const checkGameOver = payload => ({\n  type: CHECK_GAME_OVER,\n  payload\n})\n// export const changeGameSize = payload => console.log('changeGameSize', payload) || ({\n//   type: CHANGE_GAME_SIZE,\n//   payload\n// })","export const CHANGE_TURN = 'turns/changeTurn';\n\nexport const changeTurns = payload => ({\n  type: CHANGE_TURN,\n  payload\n})","import * as actions from './actions';\nimport * as gameParamsActions from '../gameParams/actions'\nimport { combineReducers } from 'redux'\n\nconst initGameState = [\n  [0,0,0],\n  [0,0,0],\n  [1,1,0]\n];\n\nconst getState = (row, column, turn) => {\n  if(turn === 'X'){\n    return  2;\n  } else if (turn === 'O') {\n    return  1;\n  }\n}\n\nfunction findLengthInDirection(position, gameState, value, change) {\n  let {row, column} = position;\n  let upwardLength = 0;\n  let downwardLength = 0;\n  // positive direction\n  while(row >= 0 && row < gameState.length && column >= 0 && column < gameState.length && gameState[row][column]) {\n    if(gameState[row][column] === value){\n      downwardLength++;\n      row = row + change[0];\n      column = column + change[1];\n    } else {\n      break;\n    }\n  }\n  row = position.row - change[0];\n  column = position.column - change[1];\n  while(row >= 0 && row < gameState.length && column >= 0 && column < gameState.length && gameState[row][column]) {\n    if(gameState[row][column] === value) {\n      upwardLength++;\n      row = row - change[0];\n      column = column - change[1];\n    } else {\n      break;\n    }\n  }\n  return upwardLength + downwardLength;\n}\n\nfunction isWinning({row, column}, gameState, successCriteria){\n  var directions = [[1,0], [0, 1], [-1, -1], [-1, 1]];\n  for (var i=0; i < directions.length; i++) {\n    var lengthInDirection = findLengthInDirection({row, column}, gameState, gameState[row][column], directions[i]);\n    if(lengthInDirection >= successCriteria) {\n      document.title = \"Game Over\";\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction gameState(state = initGameState, action) {\n  switch (action.type) {\n    case gameParamsActions.CHANGE_SIZE:\n      return new Array(action.payload).fill(0).map((v,i)=> new Array(action.payload).fill(0));\n\n    case actions.CHANGE_GAME_STATE:\n      var {row, column, turn, successCriteria} = action.payload;\n      var newState = state.map((value, _row)=>{\n        if(_row === row){\n          return value.map((value, _column)=> {\n            if(_column === column){\n              return getState(row, column, turn);\n            } else {\n              return value;\n            }\n          })\n        }\n        return [...value];\n      })\n      console.log('game over');\n      isWinning({row, column}, newState, successCriteria);\n      return newState;\n    default:\n      return state;\n  }\n}\n\nfunction gameOver(state = false, action){\n  switch(action.type){\n    case actions.CHECK_GAME_OVER:\n      var {row, column, gameState, successCriteria} = action.payload;\n      return isWinning({row, column}, gameState, successCriteria);\n    default: \n      return state;\n  }\n}\n\nexport default combineReducers({gameState, gameOver});","import React, {useEffect, useState} from 'react';\nimport { connect } from 'react-redux'\nimport { changeGameState, checkGameOver } from './actions';\nimport { changeTurns } from '../turns/actions';\nexport { default as reducer } from './reducer';\n\nexport const Game = props => {\n  const [position, setPosition] = useState({});\n\n  const handleGameTurn = (row, column) => async e => {\n    const online = true;\n    const {turn, turnNumber, successCriteria, gameState} = props;\n    if(online){\n      await window.peer.connectedRTC.send({\n        turnNumber, row, column, turn\n      })\n    }\n    setPosition({row, column})\n    if(props.gameState[row][column] === 0){\n      // changeGameState(row, column)\n      props.changeGameState({row, column, turn, successCriteria});\n      props.changeTurns({turn, turnNumber});\n    }\n  }\n    \n\n  var sizeArray = new Array(props.size).fill(0);\n  const getState = (row, column) => {\n    switch (props.gameState[row][column]) {\n      case 2: \n        return 'X';\n      case 1:\n        return 'O';\n      case 0:\n      default:\n        return '';\n    }\n  }\n\n  return (<div className=\"game\">\n    { \n      sizeArray.map((value, row) => (<div className=\"row\" key={row+' row'}>\n        {sizeArray.map((value, column)=> {\n          return (<div className=\"element\" key={column + ' column'} onClick={handleGameTurn(row, column)}>{getState(row, column)}</div>)\n        })}\n      </div>))\n    }\n  </div>);\n}\n\n\nconst mapStateToProps = ({gameParams, gameState: {gameState, gameOver}, turns}) => {\n  return {\n    size: gameParams.size,\n    successCriteria: gameParams.successCriteria,\n    gameState,\n    gameOver,\n    turn: turns.turn,\n    turnNumber: turns.turnNumber\n  }\n};\nconst mapDispatchToProps = dispatch => ({\n  dispatch,\n  changeGameState: payload => dispatch(changeGameState(payload)),\n  checkGameOver: payload => dispatch(checkGameOver(payload)),\n  changeTurns: payload => dispatch(changeTurns(payload))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","import * as actions from './actions'\n\nconst turns = ['X', 'O'];\nconst initialState = {\n  turnNumber: 0,\n  turn: turns[0]\n}\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.CHANGE_TURN:\n      ++state.turnNumber;\n      if(action.payload.turn === 'X'){\n        return {...state, turnNumber: state.turnNumber++, turn: 'O'};\n      } \n      return {...state,  turnNumber: state.turnNumber++, turn: 'X'};\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","import React from 'react';\nimport { connect } from 'react-redux'\nimport {changeTurns} from './actions';\nexport {default as reducer} from './reducer';\n\nfunction Turns(props) {\n  return (<div className=\"ticTac\">\n    <button className={props.turn==='X' ? 'highlight': ''}>X</button>\n    <button className={props.turn==='O' ? 'highlight': ''}>O</button>\n  </div>)\n}\n\n\nconst mapStateToProps = (state) => ({turn:state.turn})\nconst mapDispatchToProps = dispatch => ({\n  changeTurns: payload => dispatch(changeTurns(payload))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(Turns);","import { createStore, applyMiddleware } from 'redux'\nimport { combineReducers } from 'redux'\n\nimport thunk from 'redux-thunk';\nimport {reducer as gameParams} from '../gameParams';\nimport {reducer as turns} from '../turns';\nimport {reducer as gameState} from '../game';\nimport logger from 'redux-logger'\n\nconst rootReducer = combineReducers({gameParams, turns, gameState})\nconst store = createStore(rootReducer, applyMiddleware(...[thunk]));\n\nexport default store;","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux'\n\nimport * as gameAction from '../game/actions';\nimport { changeTurns } from '../turns/actions';\n\nvar peer = window.peer = new window.Peer({key: 'lwjd5qra8257b9'});\nfunction setDataReceive(connection, dispatch){\n  connection.on('data', function(data) {\n    console.log(data);\n    const {row, column, turn, turnNumber} = data;\n    dispatch(gameAction.changeGameState({row, column, turn}));\n    dispatch(changeTurns({turn, turnNumber}));\n  });\n}\nconst Peer = props => {\n  const [peerId, setPeerID] = useState('');\n  const [connectToPeerId, setConnectToPeerID] = useState('');\n\n  useEffect(() => {\n    peer.on('open', function(id) {\n      setPeerID(id);\n    });\n  }, [])\n\n  useEffect(() => {\n    peer.on('connection', function(peerjsConnection) {\n      console.log('connected');\n      // TODO: find way to avoid making this global\n      window.peer.connectedRTC = peerjsConnection;\n      peerjsConnection.on('open', function(peer) {\n        setDataReceive(peerjsConnection, props.dispatch);\n      });\n    });\n    \n    async function connectWithPeer() {\n      var peerjsConnection = window.peer.connectedRTC = await peer.connect(connectToPeerId);\n      setDataReceive(peerjsConnection, props.dispatch);\n    }\n    connectWithPeer();\n  }, [connectToPeerId, props.dispatch]);\n\n\n  const handleConnectToPeer = e => {\n    setConnectToPeerID(e.target.value);\n  }\n\n  return (\n    <div>\n      <label htmlFor=\"peerId\">My peer ID: </label>\n      <span type=\"text\" name=\"peerId\" id=\"peerId\" value={peerId} minLength={15} style={{display: 'inline-block'}}>{' '}{peerId}{' '}</span>\n      <label htmlFor=\"peerId\">  Connect to peer ID</label>\n      <input type=\"text\" name=\"peerId\" id=\"peerId\" value={connectToPeerId} onChange={handleConnectToPeer} />\n    </div>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  dispatch,\n  changeTurns: payload => dispatch(changeTurns())\n})\n\nexport default connect(null, mapDispatchToProps)(Peer);","import React from 'react';\nimport { default as GameParams } from './gameParams';\nimport { default as Game } from './game';\nimport { default as Turns } from './turns';\nimport './App.css';\nimport { Provider } from 'react-redux'\nimport store from './store';\nimport Peer from './peer';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Mega</h1>\n        </header>\n        <GameParams />\n        <Peer />\n        <Turns/>\n        <Game />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}